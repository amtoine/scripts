#!/usr/bin/env nu

use std log

# check a file for common mistakes
def main [
    file: path  # the path to the script to check
    --no-mutable: bool  # disallow the use of the `mut` keyword
    --error (-D): string = "errors"  # transform warnings into errors
] {
    let ast = nu --ide-ast $file | from json

    if $no_mutable {
        let muts = $ast | where shape == shape_internalcall and content == mut
        if not ($muts | is-empty) {
            let span = metadata $file | get span
            error make {
                msg: $"(ansi red_bold)clippy::mutable_not_allowed(ansi reset)"
                label: {
                    text: $"found `mut` keyword at cursor positions ($muts | get span.start | str join ', ')"
                    start: $span.start
                    end: $span.end
                }
            }
        }
    }

    for token in ($ast | enumerate) {
        if $token.item.shape == "shape_vardecl" {
            let next = $ast | get ($token.index + 1)
            if ($next.shape == "shape_block") and (($next.content | str trim) == "(") {
                if $error == "warnings" {
                    let span = metadata $file | get span
                    error make {
                        msg: $"(ansi red_bold)clippy::useless_parentheses(ansi reset)"
                        label: {
                            text: $"found useless parentheses at cursor position ($next.span.start)"
                            start: $span.start
                            end: $span.end
                        }
                    }
                }

                log warning $"(ansi red_bold)clippy::useless_parentheses(ansi reset): found useless parentheses in ($file) at cursor position ($next.span.start)"
            }
        }

        if $token.item.shape == "shape_internalcall" and $token.item.content == "while" {
            let next = $ast | get ($token.index + 1)
            if ($next.shape == "shape_bool") and ($next.content == "true") {
                if $error == "warnings" {
                    let span = metadata $file | get span
                    error make {
                        msg: $"(ansi red_bold)clippy::use_of_while_true(ansi reset)"
                        label: {
                            text: $"`while true` can be collapsed into `loop` at cursor position ($next.span.start)"
                            start: $span.start
                            end: $span.end
                        }
                    }
                }

                log warning $"(ansi red_bold)clippy::use_of_while_true(ansi reset): `while true` can be collapsed into `loop` in ($file) at cursor position ($next.span.start)"
            }
        }
    }
}
