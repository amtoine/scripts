#! /usr/bin/bash
#*
#*                 _    __ _ _
#*  __ _ ___  __ _| |_ / _(_) |___ ___  WEBSITE: https://goatfiles.github.io
#* / _` / _ \/ _` |  _|  _| | / -_|_-<  REPOS: https://github.com/goatfiles
#* \__, \___/\__,_|\__|_| |_|_\___/__/  LICENCE: https://github.com/goatfiles/dotfiles/blob/main/LICENSE
#* |___/
#*          MAINTAINERS:
#*              AMTOINE: https://github.com/amtoine antoine#1306 7C5EE50BA27B86B7F9D5A7BA37AAE9B486CFF1AB
#*              ATXR:    https://github.com/atxr    atxr#6214    AF97503EDC65A06845114630F00A52147514670B
#*

# parse the arguments.
OPTIONS=$(getopt -o tbnh --long toggle,blur,notify,help -n 'amtoine-pcm' -- "$@")
if [ $? != 0 ] ; then echo "Terminating..." >&2 ; exit 1 ; fi
eval set -- "$OPTIONS"

# environment variables
[[ ! -v DUNST_ID ]] && DUNST_ID=6
[[ ! -v PICOM_EXTRA_FLAGS ]] && PICOM_EXTRA_FLAGS="--experimental-backends"
[[ ! -v ICONS ]] && ICONS="/usr/share/icons/amtoine-icons-git/stickers/100x100"


usage () {
  #
  # the usage function.
  #
  echo "Usage: amtoine-pcm [-htbn]"
  echo "Type -h or --help for the full help."
  exit 0
}


help () {
  #
  # the help function.
  #
  echo "amtoine-pcm:"
  echo "     This script allows the user to easily manage picom."
  echo "     Do not forget to puth it in your PATH."
  echo ""
  echo "Usage:"
  echo "     amtoine-pcm [-htbn]"
  echo ""
  echo "Switches:"
  echo "     -h/--help       shows this help."
  echo "     -t/--toggle     toggle picom ON and OFF"
  echo "     -b/--blur       toggle picom's blur effect on transparent windows"
  echo "     -n/--notify     enable notifications"
  echo ""
  echo "Environment variables:"
  echo "     DUNST_ID        the id of the dunst notification to be replaced (defaults to 6)"
  echo "     ICONS           the path the the icons (defaults to '/usr/share/icons/amtoine-icons-git/dark/128x128')"
  echo "     PICOM_EXTRA_FLAGS     extra flags to pass to \`picom\` (defaults to '--experimental-backends')"

  exit 0
}


main () {
  #
  # TODO.
  #
  while [[ $# -gt 0 ]]; do
    case "$1" in
      -h | --help ) help ;;
      -t | --toggle ) ACTION="toggle"; shift 1 ;;
      -b | --blur )   ACTION="blur"; shift 1 ;;
      -n | --notify ) NOTIFY="yes"; shift 1 ;;
      -- ) shift; break ;;
      * ) break ;;
    esac
  done
  [ -z "$ACTION" ] && usage
  case "$ACTION" in
    toggle ) 
      if pgrep -x "picom" > /dev/null
      then
        killall picom
        [[ "$NOTIFY" == "yes" ]] && dunstify "amtoine-pcm" "picom killed" --icon="$ICONS/video/compositor/off.png" --replace "$DUNST_ID"
      else
        picom  --daemon $PICOM_EXTRA_FLAGS
        [[ "$NOTIFY" == "yes" ]] && dunstify "amtoine-pcm" "picom started" --icon="$ICONS/video/compositor/on.png" --replace "$DUNST_ID"
      fi;;
    blur )
      if grep "^#blur-method" ~/.config/picom/picom.conf > /dev/null
      then
        sed -i 's/^#\?blur-method/blur-method/' ~/.config/picom/picom.conf
        [[ "$NOTIFY" == "yes" ]] && dunstify "amtoine-pcm" "blur ON" --icon="$ICONS/video/blur/on.png" --replace "$DUNST_ID"
      else
        sed -i 's/^#\?blur-method/#blur-method/' ~/.config/picom/picom.conf
        [[ "$NOTIFY" == "yes" ]] && dunstify "amtoine-pcm" "blur OFF" --icon="$ICONS/video/blur/off.png" --replace "$DUNST_ID"
      fi;;
    * ) echo "an error occured (got unexpected '$ACTION')" ;;
  esac
}


main "$@"
