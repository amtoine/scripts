#!/usr/bin/env bash

# environment variables.
[ -z "$DUNST_ID" ] && DUNST_ID=8
DUNST_HEADER="a2n-s-gh-api"


# create the temporary file to hold the result of the API pull.
tmpdir="/tmp/a2n-s-scripts-git"
mkdir -p "$tmpdir"
tmpfile=$(mktemp "$tmpdir/gh-api.XXXXXX")
trap  'rm "$tmpfile"' 0 1 15


pull_from_api () {
    dunstify "$DUNST_HEADER" "pulling information from the API..." --replace "$DUNST_ID"
    gh api notifications --jq '.' | tee "$tmpfile" > /dev/null
    dunstify "$DUNST_HEADER" "pulling information from the API... done!" --replace "$DUNST_ID"
}


get_nb_notifications () { jq '.[].subject.title' "$tmpfile" | wc -l; }
get_titles () { jq '.[].subject.title' "$tmpfile"; }
get_repos  () { jq '.[].repository.name' "$tmpfile"; }
get_users  () { jq '.[].repository.owner.login' "$tmpfile"; }
get_issues () { jq '.[].subject.url' "$tmpfile" | sed 's|.*/||g'; }


main () {
    pull_from_api
    if [ "$(get_nb_notifications)" -eq 0 ];
    then
        dunstify "$DUNST_HEADER" "no notifications for now..."
    else
        readarray -t titles < <(get_titles)
        readarray -t repos < <(get_repos)
        readarray -t users < <(get_users)
        readarray -t issues < <(get_issues)
        for ((i=0; i<"${#repos[@]}"; i++));
        do
            dunstify "${users[$i]}/${repos[$i]}: ${issues[$i]}" "\n${titles[$i]}"
        done
    fi
}


main "$@"
