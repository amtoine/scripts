#!/usr/bin/env nu
#*
#*                 _    __ _ _
#*  __ _ ___  __ _| |_ / _(_) |___ ___  WEBSITE: https://goatfiles.github.io
#* / _` / _ \/ _` |  _|  _| | / -_|_-<  REPOS: https://github.com/goatfiles
#* \__, \___/\__,_|\__|_| |_|_\___/__/  LICENCE: https://github.com/goatfiles/dotfiles/blob/main/LICENSE
#* |___/
#*          MAINTAINERS:
#*              AMTOINE: https://github.com/amtoine antoine#1306 7C5EE50BA27B86B7F9D5A7BA37AAE9B486CFF1AB
#*              ATXR:    https://github.com/atxr    atxr#6214    AF97503EDC65A06845114630F00A52147514670B
#*

def pretty-cmd [] {
    let cmd = $in
    $"(ansi -e {fg: default attr: di})($cmd)(ansi reset)"
}

def pacman_deps_wrapper [
    --flag (-f): string
] {
    print $"running ($'pacman ($flag)' | pretty-cmd)"

    pacman $flag
    | lines
    | split column " "
    | rename package version
}

def cargo_deps [] {
    print $"running ('cargo install  --list' | pretty-cmd)"

    cargo install --list
    | lines
    | find --multiline --regex ":\$"
    | str replace ":$" ""
    | split column " v"
    | rename package version
}

def pip_deps [] {
    print $"running ('pip freeze' | pretty-cmd)"

    pip freeze
    | lines
    | split column "=="
    | rename package version
}

def pipx_deps [] {
    print $"running ('pipx list' | pretty-cmd)"

    pipx list
    | lines
    | find ", installed"
    | str trim
    | str replace "package " ""
    | str replace ", installed using Python" ""
    | split column " "
    | rename package version python
}

def main [
    output: string = "~/pkgs.toml"
] {
    let x = {
        pacman: {
            all: (pacman_deps_wrapper --flag "-Q"),
            explicit: (pacman_deps_wrapper --flag "-Qe"),
            native: (pacman_deps_wrapper --flag "-Qen"),
            foreign: (pacman_deps_wrapper --flag "-Qem")
        }
        rust: {
            cargo: (cargo_deps)
        }
        python: {
            pip: (pip_deps),
            pipx: (pipx_deps)
        }
    }

    print $"Saving the system dependencies to ($output | path expand)"
    $x | save --force ($output | path expand)
}
